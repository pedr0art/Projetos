------------------------------
CREATE TABLE IF NOT EXISTS public.messages
(
    id integer NOT NULL DEFAULT nextval('messages_id_seq'::regclass),
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    sender_id integer NOT NULL,
    room_id integer NOT NULL,
    CONSTRAINT messages_pkey PRIMARY KEY (id),
    CONSTRAINT messages_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.messages
    OWNER to root;
--------------------------------

CREATE TABLE IF NOT EXISTS public.room_metadata
(
    room_id integer NOT NULL,
    sector_id integer,
    owner_id integer,
    is_active boolean DEFAULT true,
    CONSTRAINT room_metadata_pkey PRIMARY KEY (room_id),
    CONSTRAINT room_metadata_owner_id_fkey FOREIGN KEY (owner_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT room_metadata_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT room_metadata_sector_id_fkey FOREIGN KEY (sector_id)
        REFERENCES public.sector (sector_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.room_metadata
    OWNER to root;
-------------------------------------

CREATE TABLE IF NOT EXISTS public.rooms
(
    id integer NOT NULL DEFAULT nextval('rooms_id_seq'::regclass),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    is_group boolean NOT NULL,
    owner_id integer,
    sector_id integer,
    is_closed boolean DEFAULT false,
    target_sector_id integer,
    created_by integer,
    is_finished boolean DEFAULT false,
    CONSTRAINT rooms_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_owner_id_fkey FOREIGN KEY (owner_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_sector_id_fkey FOREIGN KEY (sector_id)
        REFERENCES public.sector (sector_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT rooms_target_sector_id_fkey FOREIGN KEY (target_sector_id)
        REFERENCES public.sector (sector_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.rooms
    OWNER to root;

---------------------------------------------

CREATE TABLE IF NOT EXISTS public.sector
(
    sector_id integer NOT NULL DEFAULT nextval('sector_sector_id_seq'::regclass),
    sector_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    sector_abbreviation text COLLATE pg_catalog."default",
    CONSTRAINT sector_pkey PRIMARY KEY (sector_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.sector
    OWNER to root;

--------------------------------------------

CREATE TABLE IF NOT EXISTS public.user_rooms
(
    user_id integer NOT NULL,
    room_id integer NOT NULL,
    CONSTRAINT user_rooms_pkey PRIMARY KEY (user_id, room_id),
    CONSTRAINT user_rooms_room_id_fkey FOREIGN KEY (room_id)
        REFERENCES public.rooms (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT user_rooms_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_rooms
    OWNER to root;
---------------------------------------

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    sector_id integer,
    full_name text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT fk_sector FOREIGN KEY (sector_id)
        REFERENCES public.sector (sector_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET NULL
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to root;

---------------------------------------------------------------

TEMP_USERS


CREATE TABLE temp_users (
    username TEXT,
    sector_id INTEGER
);

-------------------------------------------------------------

INSERIR NA TABELA PRINCIPAL


INSERT INTO users (username, sector_id, password_hash)
SELECT username, sector_id, crypt('123456', gen_salt('bf'))
FROM temp_users;

---------------------------------------------------------

EXTENS√ÉO PGCRYPTO

CREATE EXTENSION IF NOT EXISTS pgcrypto;
